/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.mit.ll.vizlinc.components;

import edu.mit.ll.vizlinc.concurrency.VizLincLongTask;
import edu.mit.ll.vizlinc.graph.GraphManager;
import iap.AutomaticAnnotation;
import iap.LeadershipAnnotation;
import iap.NeighborNeighborMetric;
import iap.RemoveDuplicatesLinesInfile;
import iap.RemoveIsolatedNodes;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.gephi.data.attributes.api.AttributeController;
import org.gephi.data.attributes.api.AttributeModel;
import org.gephi.graph.api.Graph;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.GraphModel;
import org.gephi.graph.api.Node;
import org.gephi.ranking.api.Ranking;
import org.gephi.ranking.api.RankingController;
import org.gephi.ranking.api.RankingModel;
import org.gephi.statistics.plugin.Degree;
import org.gephi.statistics.plugin.EigenvectorCentrality;
import org.gephi.statistics.plugin.GraphDistance;
import org.gephi.statistics.plugin.PageRank;
import org.gephi.statistics.plugin.WeightedDegree;
import org.gephi.utils.progress.Progress;
import org.gephi.utils.progress.ProgressTicket;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;

/**
 *
 * @author Glory
 */
public class IapToolComponent extends javax.swing.JPanel implements java.beans.Customizer {
    
    private Object bean;
    
    //AutomaticAnnotationField
    private File inputFile;
    private File outputFile;
    private AutomaticAnnotation.DataBaseWiki dataBaseType;
    
    //Leadership Annotation Field
    iap.LeadershipAnnotation leadershipAnnotation;
    File leadAnnotInputFile;
    File leadAnnotOutputFile;
    String[] leadKeyWordsList;
    String[] excludeKeyWordsList;
    
    //RankingSaving Field
    File rankingSavingOutputFile;
    File rankingSavingInputFile;
    
    //Remove Isolated Nodes Field
    File rmvIsolatedNFile;
    File rmvIsolatedNOutputfile;
    
    //Remove Duplicates field
    File rmvDupFile1;
    File rmvDupFile2;
    File rmvDupOutputFile;

    /**
     * Creates new customizer IapToolComponent
     */
    public IapToolComponent() {
        initComponents();
        
        
    }
    
    public void setObject(Object bean) {
        this.bean = bean;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar2 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        outputFileTxtFieldLeadAnnot = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        inputFileTxtFieldLeadshipAnnot = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        leadershipKeyWords = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        leadershipExcludeKeyWords = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        label1 = new java.awt.Label();
        micResultTxtField = new javax.swing.JTextField();
        label2 = new java.awt.Label();
        rmvnodesNotInGrapgBtn = new javax.swing.JButton();
        rmvIsolatedNodesBtn = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        rmvIsolatedNodeInputFieldTxtField = new javax.swing.JTextField();
        rmvIsolatedNodesSearchBtn = new javax.swing.JButton();
        rmvIsolatedNodeRemoveBtn = new javax.swing.JButton();
        label5 = new java.awt.Label();
        rmvIsolatedNodeOutputFieldTxtField = new javax.swing.JTextField();
        rmvIsolatedNodesOutputFileSearchBtn = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        metricAvrgRunBtn = new javax.swing.JButton();
        metricAvrgClosenessChackBox1 = new javax.swing.JCheckBox();
        metricAvrgEigenvectorCentCheckBox1 = new javax.swing.JCheckBox();
        metricAvrgPageRankChackBox1 = new javax.swing.JCheckBox();
        metricAvrgDegreeCheckBox = new javax.swing.JCheckBox();
        metricAvrgNumNeightbosCheckBox1 = new javax.swing.JCheckBox();
        metricAvrgBetweenessCheckBox1 = new javax.swing.JCheckBox();
        metricAvrgNeighLogCheckBox1 = new javax.swing.JCheckBox();
        metricAvrgNeighAvrgCheckBox1 = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        rankingSavingOutputFileTxtField = new javax.swing.JTextField();
        rankingSavingSearchBtn = new javax.swing.JButton();
        rankingSavingNumNeightbosCheckBox = new javax.swing.JCheckBox();
        rankingSavingClosenessChackBox = new javax.swing.JCheckBox();
        rankingSavingEigenvectorCentCheckBox = new javax.swing.JCheckBox();
        rankingSavingPageRankChackBox = new javax.swing.JCheckBox();
        rankingSavingDegreeCheckBox = new javax.swing.JCheckBox();
        rankingSavingSaveBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        rankingSavingInputFileTxtField = new javax.swing.JTextField();
        rankingSavingSearchBtn1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        rankingSavingBetweenessCheckBox = new javax.swing.JCheckBox();
        rankingSavingNeighLogCheckBox = new javax.swing.JCheckBox();
        rankingSavingNeighAvrgCheckBox = new javax.swing.JCheckBox();
        closenessAvrgCheckBtn = new javax.swing.JCheckBox();
        eigenAvrgCheckBtn = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        rankingSavingSaveBtn1 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        rmvDuplicateFile2Txtfield = new javax.swing.JTextField();
        rmvDuplicateFile1Txtfield = new javax.swing.JTextField();
        rmvDuplicatesF1Btn = new javax.swing.JButton();
        rmvDuplicatesF2btn = new javax.swing.JButton();
        label8 = new java.awt.Label();
        jLabel16 = new javax.swing.JLabel();
        rmvDuplicateOutputFileTxtField = new javax.swing.JTextField();
        rmvDuplicateOutputFSearchBtn = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        rmvDuplicateResultTxtField = new javax.swing.JTextField();
        rmvDuplicateRemoveBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        inputFileTxtField = new javax.swing.JTextField();
        wikiDataRadBtn = new javax.swing.JRadioButton();
        jButton8 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        outputFileTxtField = new javax.swing.JTextField();
        bothwikiBrn = new javax.swing.JRadioButton();
        wikiMediaRadBtn = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());
        add(jProgressBar1, java.awt.BorderLayout.PAGE_END);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Leadership Annotation");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jLabel1.text")); // NOI18N

        outputFileTxtFieldLeadAnnot.setEditable(false);
        outputFileTxtFieldLeadAnnot.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.outputFileTxtField.text")); // NOI18N

        jButton1.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        inputFileTxtFieldLeadshipAnnot.setEditable(false);
        inputFileTxtFieldLeadshipAnnot.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.inputFileTxtField.text")); // NOI18N

        jButton3.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jLabel2.text")); // NOI18N

        leadershipKeyWords.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.outputFileTxtField.text")); // NOI18N

        jLabel5.setText("Output File (csv)");

        leadershipExcludeKeyWords.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.outputFileTxtField.text")); // NOI18N

        jLabel3.setText("Exclude Key Words:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(229, 229, 229))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leadershipExcludeKeyWords, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leadershipKeyWords, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(144, 144, 144)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inputFileTxtFieldLeadshipAnnot, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                            .addComponent(outputFileTxtFieldLeadAnnot))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2))))
                .addContainerGap(178, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFileTxtFieldLeadshipAnnot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFileTxtFieldLeadAnnot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jLabel5))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(leadershipKeyWords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leadershipExcludeKeyWords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(18, 18, 18))
        );

        jTabbedPane1.addTab("LeadershipAnnot", jPanel2);

        jButton4.setText("Get Amnt of Edges");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Amnt of isolated Nodes");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        label1.setText("All the calculations are based on the visible graph");

        micResultTxtField.setEditable(false);

        label2.setText("Results:");

        rmvnodesNotInGrapgBtn.setText("Remove Nodes not in Graph");
        rmvnodesNotInGrapgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvnodesNotInGrapgBtnActionPerformed(evt);
            }
        });

        rmvIsolatedNodesBtn.setText("Remove Isolated Node from graph");
        rmvIsolatedNodesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvIsolatedNodesBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addComponent(micResultTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(rmvIsolatedNodesBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rmvnodesNotInGrapgBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(rmvnodesNotInGrapgBtn)
                .addGap(18, 18, 18)
                .addComponent(rmvIsolatedNodesBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(micResultTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Mic", jPanel7);

        label3.setText("Input File (txt, csv):");

        label4.setText("Remove Isolated Node from the input file");

        rmvIsolatedNodeInputFieldTxtField.setEditable(false);

        rmvIsolatedNodesSearchBtn.setText("Search");
        rmvIsolatedNodesSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvIsolatedNodesSearchBtnActionPerformed(evt);
            }
        });

        rmvIsolatedNodeRemoveBtn.setText("Remove");
        rmvIsolatedNodeRemoveBtn.setEnabled(false);
        rmvIsolatedNodeRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvIsolatedNodeRemoveBtnActionPerformed(evt);
            }
        });

        label5.setText("Output File (txt, csv):");

        rmvIsolatedNodeOutputFieldTxtField.setEditable(false);

        rmvIsolatedNodesOutputFileSearchBtn.setText("Search");
        rmvIsolatedNodesOutputFileSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvIsolatedNodesOutputFileSearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(rmvIsolatedNodeRemoveBtn)
                .addGap(266, 266, 266))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rmvIsolatedNodeOutputFieldTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rmvIsolatedNodesOutputFileSearchBtn))
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addGap(186, 186, 186)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(rmvIsolatedNodeInputFieldTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(rmvIsolatedNodesSearchBtn))))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rmvIsolatedNodeInputFieldTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rmvIsolatedNodesSearchBtn)))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rmvIsolatedNodeOutputFieldTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rmvIsolatedNodesOutputFileSearchBtn)))
                .addGap(26, 26, 26)
                .addComponent(rmvIsolatedNodeRemoveBtn)
                .addContainerGap(141, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("RmvIsolatedNodes", jPanel8);

        metricAvrgRunBtn.setText("Run");
        metricAvrgRunBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricAvrgRunBtnActionPerformed(evt);
            }
        });

        metricAvrgClosenessChackBox1.setText("Closeness Centrality");

        metricAvrgEigenvectorCentCheckBox1.setText("Eigenvector Centrality");

        metricAvrgPageRankChackBox1.setText("PageRank");

        metricAvrgDegreeCheckBox.setText("Degree");

        metricAvrgNumNeightbosCheckBox1.setText("#Neighbors");

        metricAvrgBetweenessCheckBox1.setText("Betweeness");

        metricAvrgNeighLogCheckBox1.setText("Neigh-Neigh Log");

        metricAvrgNeighAvrgCheckBox1.setText("Neigh-Neigh Avrg");

        jLabel14.setText("Select Metrics to calculate:");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel14)
                .addGap(35, 35, 35)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(metricAvrgNeighLogCheckBox1)
                    .addComponent(metricAvrgBetweenessCheckBox1)
                    .addComponent(metricAvrgNumNeightbosCheckBox1)
                    .addComponent(metricAvrgDegreeCheckBox))
                .addGap(18, 27, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(metricAvrgNeighAvrgCheckBox1)
                        .addGap(167, 167, 167))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                                .addComponent(metricAvrgEigenvectorCentCheckBox1)
                                .addGap(99, 99, 99))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(metricAvrgPageRankChackBox1)
                                    .addComponent(metricAvrgClosenessChackBox1))
                                .addGap(109, 109, 109)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(metricAvrgRunBtn)))
                .addGap(74, 74, 74))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(metricAvrgDegreeCheckBox)
                                .addComponent(metricAvrgClosenessChackBox1))
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(metricAvrgBetweenessCheckBox1)
                            .addComponent(metricAvrgNeighAvrgCheckBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(metricAvrgNumNeightbosCheckBox1)
                            .addComponent(metricAvrgEigenvectorCentCheckBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(metricAvrgNeighLogCheckBox1)
                            .addComponent(metricAvrgPageRankChackBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(metricAvrgRunBtn)))
                .addContainerGap(94, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Metric Avrg of Neighbors", jPanel12);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane1.addTab("Metrics", jPanel11);

        jLabel7.setText("Output File (csv)");

        rankingSavingOutputFileTxtField.setEditable(false);
        rankingSavingOutputFileTxtField.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.outputFileTxtField.text")); // NOI18N

        rankingSavingSearchBtn.setText("Search");
        rankingSavingSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingSavingSearchBtnActionPerformed(evt);
            }
        });

        rankingSavingNumNeightbosCheckBox.setText("#Neighbors");

        rankingSavingClosenessChackBox.setText("Closeness Centrality");

        rankingSavingEigenvectorCentCheckBox.setText("Eigenvector Centrality");

        rankingSavingPageRankChackBox.setText("PageRank");

        rankingSavingDegreeCheckBox.setText("Degree");

        rankingSavingSaveBtn.setText("Save");
        rankingSavingSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingSavingSaveBtnActionPerformed(evt);
            }
        });

        jLabel8.setText("Input File (csv)");

        rankingSavingInputFileTxtField.setEditable(false);
        rankingSavingInputFileTxtField.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.outputFileTxtField.text")); // NOI18N
        rankingSavingInputFileTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingSavingInputFileTxtFieldActionPerformed(evt);
            }
        });

        rankingSavingSearchBtn1.setText("Search");
        rankingSavingSearchBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingSavingSearchBtn1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Ranks to Save:");

        rankingSavingBetweenessCheckBox.setText("Betweeness");

        rankingSavingNeighLogCheckBox.setText("Neigh-Neigh Log");

        rankingSavingNeighAvrgCheckBox.setText("Neigh-Neigh Avrg");

        closenessAvrgCheckBtn.setText("Closness Neighbors Avrg");
        closenessAvrgCheckBtn.setEnabled(false);

        eigenAvrgCheckBtn.setText("Eigen. Neighbors Avrg");
        eigenAvrgCheckBtn.setEnabled(false);

        jCheckBox3.setText("PageRanks Neighbors Avrg");
        jCheckBox3.setEnabled(false);

        jCheckBox4.setText("Degree Neighbors Avrg");
        jCheckBox4.setEnabled(false);

        jCheckBox5.setText("# of Neigh. Neighbors Avrg");
        jCheckBox5.setEnabled(false);

        jCheckBox6.setText("Betweeness Neighbors Avrg");
        jCheckBox6.setEnabled(false);

        jCheckBox7.setText("Neighbors Avrg");
        jCheckBox7.setEnabled(false);

        jCheckBox8.setText("Neighbors Avrg");
        jCheckBox8.setEnabled(false);

        rankingSavingSaveBtn1.setText("Save Avrg of Neigh");
        rankingSavingSaveBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingSavingSaveBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rankingSavingNumNeightbosCheckBox)
                                .addComponent(rankingSavingBetweenessCheckBox))
                            .addGap(50, 50, 50)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addComponent(jCheckBox6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rankingSavingSaveBtn))
                                .addComponent(jCheckBox5)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rankingSavingOutputFileTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rankingSavingInputFileTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rankingSavingSearchBtn1)
                                .addComponent(rankingSavingSearchBtn)))
                        .addComponent(rankingSavingSaveBtn1))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rankingSavingEigenvectorCentCheckBox)
                            .addComponent(rankingSavingClosenessChackBox)
                            .addComponent(rankingSavingPageRankChackBox)
                            .addComponent(rankingSavingDegreeCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox4)
                            .addComponent(jCheckBox3)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(closenessAvrgCheckBtn)
                                    .addComponent(eigenAvrgCheckBtn))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rankingSavingNeighAvrgCheckBox)
                                    .addComponent(rankingSavingNeighLogCheckBox))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox8)
                                    .addComponent(jCheckBox7))))))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rankingSavingInputFileTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(rankingSavingSearchBtn1))
                .addGap(3, 3, 3)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rankingSavingOutputFileTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(rankingSavingSearchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rankingSavingClosenessChackBox)
                            .addComponent(jLabel6)
                            .addComponent(closenessAvrgCheckBtn))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rankingSavingEigenvectorCentCheckBox)
                            .addComponent(eigenAvrgCheckBtn)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rankingSavingNeighAvrgCheckBox)
                            .addComponent(jCheckBox7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rankingSavingNeighLogCheckBox)
                            .addComponent(jCheckBox8))))
                .addGap(1, 1, 1)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rankingSavingPageRankChackBox)
                    .addComponent(jCheckBox3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rankingSavingDegreeCheckBox)
                    .addComponent(jCheckBox4))
                .addGap(1, 1, 1)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rankingSavingNumNeightbosCheckBox)
                    .addComponent(jCheckBox5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rankingSavingSaveBtn)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rankingSavingBetweenessCheckBox)
                        .addComponent(jCheckBox6)))
                .addGap(18, 18, 18)
                .addComponent(rankingSavingSaveBtn1)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("RankingSaving", jPanel6);

        label6.setText("Input File 1 (txt, csv):");

        label7.setText("Output File (txt, csv):");

        rmvDuplicateFile2Txtfield.setEditable(false);

        rmvDuplicateFile1Txtfield.setEditable(false);
        rmvDuplicateFile1Txtfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvDuplicateFile1TxtfieldActionPerformed(evt);
            }
        });

        rmvDuplicatesF1Btn.setText("Search");
        rmvDuplicatesF1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvDuplicatesF1BtnActionPerformed(evt);
            }
        });

        rmvDuplicatesF2btn.setText("Search");
        rmvDuplicatesF2btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvDuplicatesF2btnActionPerformed(evt);
            }
        });

        label8.setText("Input File 2 (txt, csv):");

        jLabel16.setText("Description:");

        rmvDuplicateOutputFileTxtField.setEditable(false);

        rmvDuplicateOutputFSearchBtn.setText("Search");
        rmvDuplicateOutputFSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvDuplicateOutputFSearchBtnActionPerformed(evt);
            }
        });

        jLabel17.setText("Duplicate lines: ");

        rmvDuplicateResultTxtField.setEnabled(false);

        rmvDuplicateRemoveBtn.setText("Remove");
        rmvDuplicateRemoveBtn.setEnabled(false);
        rmvDuplicateRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvDuplicateRemoveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(145, 145, 145)
                                .addComponent(jLabel13))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rmvDuplicateOutputFileTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(rmvDuplicateOutputFSearchBtn))
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rmvDuplicateFile2Txtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(rmvDuplicatesF2btn))
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rmvDuplicateFile1Txtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(rmvDuplicatesF1Btn)))))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(247, 247, 247)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(rmvDuplicateRemoveBtn))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rmvDuplicateResultTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addGap(39, 39, 39)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rmvDuplicateFile1Txtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rmvDuplicatesF1Btn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rmvDuplicateFile2Txtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rmvDuplicatesF2btn)))
                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rmvDuplicateOutputFileTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rmvDuplicateOutputFSearchBtn)))
                .addGap(26, 26, 26)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(rmvDuplicateResultTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(rmvDuplicateRemoveBtn)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("RmvDuplicates", jPanel9);

        jButton7.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jButton1.text")); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        inputFileTxtField.setEditable(false);
        inputFileTxtField.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.inputFileTxtField.text")); // NOI18N

        wikiDataRadBtn.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.wikiDataRadBtn.text")); // NOI18N
        wikiDataRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wikiDataRadBtnActionPerformed(evt);
            }
        });

        jButton8.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jButton2.text")); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel9.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jLabel2.text")); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jLabel1.text")); // NOI18N

        outputFileTxtField.setEditable(false);
        outputFileTxtField.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.outputFileTxtField.text")); // NOI18N

        bothwikiBrn.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.bothwikiBrn.text")); // NOI18N

        wikiMediaRadBtn.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.wikiMediaRadBtn.text")); // NOI18N

        jLabel11.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jLabel3.text")); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jLabel4.text")); // NOI18N

        jButton9.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jButton3.text")); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel15.setText(org.openide.util.NbBundle.getMessage(IapToolComponent.class, "AutomaticAnnotationOptionsComponent.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(254, 254, 254)
                .addComponent(jLabel12)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 41, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputFileTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputFileTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8)
                    .addComponent(jButton7))
                .addGap(86, 86, 86))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(jButton9))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(jLabel11)
                        .addGap(javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(wikiDataRadBtn)
                                .addGap(6, 6, 6))
                            .addComponent(wikiMediaRadBtn)
                            .addComponent(bothwikiBrn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFileTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jButton8)
                    .addComponent(outputFileTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(wikiMediaRadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wikiDataRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bothwikiBrn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addGap(28, 28, 28))
        );

        jTabbedPane1.addTab("AutomatAnnot", jPanel3);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        GraphModel          graphM          = Lookup.getDefault().lookup(GraphController.class).getModel();
        RankingController   rc              = Lookup.getDefault().lookup(RankingController.class);
        RankingModel        rm              = rc.getModel();
        Ranking             degreeRanking   = rm.getRanking(Ranking.NODE_ELEMENT, Ranking.DEGREE_RANKING);

        //Sets degree rank, if it was not already set
        if(degreeRanking == null){
            AttributeModel  aM      = Lookup.getDefault().lookup(AttributeController.class).getModel();
            Degree degree = new Degree();
            degree.execute(graphM, aM);
            degreeRanking   = rm.getRanking(Ranking.NODE_ELEMENT, Ranking.DEGREE_RANKING);
        }

        int count = 0;      //amount of isolated nodes.
        for(Node n : graphM.getGraphVisible().getNodes()){
            if( (int) degreeRanking.getValue(n) == 0){
                count++;
            }
        }

        micResultTxtField.setText("Amount of isolated nodes = " + count);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Graph graph = Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
        micResultTxtField.setText("Amount of edges in graph: " + graph.getEdgeCount());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void rankingSavingSearchBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingSavingSearchBtn1ActionPerformed
        rankingSavingInputFile = iap.Utils.selectAnInputFile();
        if(rankingSavingInputFile != null){
            rankingSavingInputFileTxtField.setText(rankingSavingInputFile.getPath());
        }
    }//GEN-LAST:event_rankingSavingSearchBtn1ActionPerformed

    private void rankingSavingInputFileTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingSavingInputFileTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rankingSavingInputFileTxtFieldActionPerformed

    private void rankingSavingSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingSavingSaveBtnActionPerformed
        if(rankingSavingOutputFile == null){
            JOptionPane.showMessageDialog(null, "An output file have to be selected");
            return;
        }

        Graph graph = Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();

        ArrayList<Ranking> ranks = new ArrayList();
        setRanksToSave(ranks);

        if(ranks.size() > 0){
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(rankingSavingOutputFile));

                //writhe name of the matrics
                writer.write("label");
                for(Ranking rank : ranks){
                    writer.write("," + rank.getDisplayName());
                }
                writer.newLine();

                if(rankingSavingInputFile == null){
                    for(Node node : graph.getNodes()){
                        writer.write(node.getNodeData().getLabel());                //write name of the person
                        for(Ranking rank : ranks){
                            writer.write("," + rank.getValue(node).toString());
                        }
                        writer.newLine();
                        writer.flush();
                    }
                }else{
                    HashMap<String, Node> labelToNodeMap = iap.Utils.getLabelToNodeMap();
                    BufferedReader reader = new BufferedReader(new FileReader(rankingSavingInputFile));
                    String line;
                    while((line = reader.readLine()) != null){                                                  //go trought the whole input file
                        String nodeLabelInFile = line.split(",")[0].trim().toUpperCase();                       //extract node lable from the input file
                        if(labelToNodeMap.containsKey(nodeLabelInFile)){                                        //save the result only if the input node exist in the graph

                            String line2Write = line;
                            for(Ranking rank :ranks){
                                line2Write += "," + rank.getValue(labelToNodeMap.get(nodeLabelInFile));
                            }
                            writer.write(line2Write);
                            writer.newLine();
                            writer.flush();
                        }
                    }
                }
                writer.close();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        JOptionPane.showMessageDialog(null, "Finish");
        /*
        if(ranks.size() > 0){
            try {

                if(rankingSavingInputFile != null){
                    BufferedReader reader = new BufferedReader(new FileReader(rankingSavingInputFile));
                    String line;
                    while((line = reader.readLine()) != null){
                        String nodeLabel = line.split(",")[0].trim();
                        JOptionPane.showMessageDialog(null, nodeLabelMap.get(nodeLabel));
                        String temp = node.getNodeData().getLabel();
                        JOptionPane.showMessageDialog(null, temp);
                        for(Ranking rank :ranks){
                            temp += "," + rank.getValue(node);
                        }
                        writer.write(temp);
                        writer.newLine();
                        writer.flush();

                    }

                }else{
                    for(Node node : graph.getNodes()){
                        String temp = node.getNodeData().getLabel();
                        for(Ranking rank :ranks){
                            temp += "," + node.getAttributes().getValue(rank.getName());
                        }
                        writer.write(temp);
                        writer.newLine();
                        writer.flush();

                    }
                }

                writer.close();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }*/

    }//GEN-LAST:event_rankingSavingSaveBtnActionPerformed

    private void rankingSavingSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingSavingSearchBtnActionPerformed
        try {
            rankingSavingOutputFile = iap.Utils.selectAnOutputFile(new FileNameExtensionFilter("csv", "CSV"));
            if(rankingSavingOutputFile != null){
                rankingSavingOutputFileTxtField.setText(rankingSavingOutputFile.getPath());
            }

        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_rankingSavingSearchBtnActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(leadAnnotOutputFile == null || leadAnnotInputFile == null){
            JOptionPane.showMessageDialog(jButton1, "Both files have to be given.");
            return;
        }
        if( leadershipKeyWords.getText().isEmpty()){
            JOptionPane.showConfirmDialog(jButton1, "At least one leadership key word have to be given.");
            return;
        }

        if(leadershipExcludeKeyWords.getText().isEmpty()){
            excludeKeyWordsList = new String[0];
        }else{
            excludeKeyWordsList = leadershipExcludeKeyWords.getText().split(",");
        }
        leadKeyWordsList = leadershipKeyWords.getText().split(",");
        JOptionPane.showMessageDialog(jButton1, leadKeyWordsList);
        final VizLincLongTask task = new VizLincLongTask("Executing automatic annotation..."){
            @Override
            public void execute()
            {
                ProgressTicket pt = this.getProgressTicket();
                Progress.setDisplayName(pt, "Executing leadership annotation...");

                try {
                    leadershipAnnotation = new LeadershipAnnotation(leadAnnotInputFile , leadAnnotOutputFile, leadKeyWordsList, excludeKeyWordsList, this);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(jButton1, ex);
                }
            }
        };
        task.run();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            leadAnnotOutputFile = iap.Utils.selectAnOutputFile(new FileNameExtensionFilter("Comma Separared Vslue", "csv"));
            outputFileTxtFieldLeadAnnot.setText(leadAnnotOutputFile.getPath());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Invalid OutputFile");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        leadAnnotInputFile = iap.Utils.selectAnInputFile(new FileNameExtensionFilter("Comma Separated Value", "csv"));
        inputFileTxtFieldLeadshipAnnot.setText(leadAnnotInputFile.getPath());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        if(wikiDataRadBtn.isSelected()){
            dataBaseType = AutomaticAnnotation.DataBaseWiki.WIKIDATA;
        }else if(wikiMediaRadBtn.isSelected()){
            dataBaseType = AutomaticAnnotation.DataBaseWiki.MEDIAWIKI;
        }else if(bothwikiBrn.isSelected()){
            dataBaseType = AutomaticAnnotation.DataBaseWiki.WIKIDATA_MEDIAWIKI;
        }

        if(inputFile == null || outputFile == null || dataBaseType == null){
            return;
        }

        this.setEnabled(false);
        final VizLincLongTask task = new VizLincLongTask("Executing automatic annotation..."){
            @Override
            public void execute()
            {
                ProgressTicket pt = this.getProgressTicket();
                Progress.setDisplayName(pt, "Executing automatic annotation...");

                try {
                    iap.AutomaticAnnotation automaticAnnotation = new AutomaticAnnotation(this);
                    automaticAnnotation.setInputFile(inputFile);
                    automaticAnnotation.setOutputFile(outputFile);
                    automaticAnnotation.setWikiToUse(dataBaseType);
                    automaticAnnotation.execute();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex, "File Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        };
        task.run();
        this.setEnabled(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            outputFile =  iap.Utils.selectAnOutputFile();

        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void wikiDataRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wikiDataRadBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wikiDataRadBtnActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        inputFile = iap.Utils.selectAnInputFile();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void rmvIsolatedNodesSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvIsolatedNodesSearchBtnActionPerformed
        rmvIsolatedNFile = iap.Utils.selectAnInputFile();
        if(rmvIsolatedNFile != null){
            rmvIsolatedNodeRemoveBtn.setEnabled(true);
            rmvIsolatedNodeInputFieldTxtField.setText(rmvIsolatedNFile.getPath());
        }
    }//GEN-LAST:event_rmvIsolatedNodesSearchBtnActionPerformed

    private void rmvIsolatedNodeRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvIsolatedNodeRemoveBtnActionPerformed
        iap.RemoveIsolatedNodes rmvIsolatedNodes = new RemoveIsolatedNodes();
        try {
            if(rmvIsolatedNOutputfile == null){
                rmvIsolatedNodes.execute(rmvIsolatedNFile);
            }else{
                rmvIsolatedNodes.execute(rmvIsolatedNFile, rmvIsolatedNOutputfile);
            }
            JOptionPane.showMessageDialog(null, "Finish");
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_rmvIsolatedNodeRemoveBtnActionPerformed

    private void rmvIsolatedNodesOutputFileSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvIsolatedNodesOutputFileSearchBtnActionPerformed
        try {
            rmvIsolatedNOutputfile = iap.Utils.selectAnOutputFile();
            if(rmvIsolatedNOutputfile != null){
            rmvIsolatedNodeOutputFieldTxtField.setText(rmvIsolatedNOutputfile.getPath());
        }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        
    }//GEN-LAST:event_rmvIsolatedNodesOutputFileSearchBtnActionPerformed

    private void rmvDuplicatesF1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvDuplicatesF1BtnActionPerformed
        rmvDupFile1 = iap.Utils.selectAnInputFile();
        
        if(rmvDupFile1 != null ){
            rmvDuplicateFile1Txtfield.setText(rmvDupFile1.getPath());
            if(rmvDupFile2 != null && rmvDupOutputFile != null)
                rmvDuplicateRemoveBtn.setEnabled(true);
        }
    }//GEN-LAST:event_rmvDuplicatesF1BtnActionPerformed

    private void rmvDuplicatesF2btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvDuplicatesF2btnActionPerformed
        rmvDupFile2 = iap.Utils.selectAnInputFile();
        if(rmvDupFile2 != null ){
            rmvDuplicateFile2Txtfield.setText(rmvDupFile2.getPath());
            if(rmvDupFile1 != null && rmvDupOutputFile != null)
                rmvDuplicateRemoveBtn.setEnabled(true);
        }
    }//GEN-LAST:event_rmvDuplicatesF2btnActionPerformed

    private void rmvDuplicateOutputFSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvDuplicateOutputFSearchBtnActionPerformed
        try {
            rmvDupOutputFile = iap.Utils.selectAnOutputFile();
            if(rmvDupOutputFile != null ){
                rmvDuplicateOutputFileTxtField.setText(rmvDupOutputFile.getPath());
                if(rmvDupFile2 != null && rmvDupFile1 != null)
                    rmvDuplicateRemoveBtn.setEnabled(true);
            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        
    }//GEN-LAST:event_rmvDuplicateOutputFSearchBtnActionPerformed

    private void rmvDuplicateRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvDuplicateRemoveBtnActionPerformed
        iap.RemoveDuplicatesLinesInfile duplicateRemover = new RemoveDuplicatesLinesInfile();
        try {
            duplicateRemover.execute(rmvDupFile1, rmvDupFile2, rmvDupOutputFile);
            rmvDuplicateResultTxtField.setText(duplicateRemover.getAmountOfRemovedLines() + "");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_rmvDuplicateRemoveBtnActionPerformed

    private void rmvnodesNotInGrapgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvnodesNotInGrapgBtnActionPerformed
        File inputFile = iap.Utils.selectAnInputFile();
        
        if(inputFile != null){
            try {
                ArrayList<String>       result          = new ArrayList();
                HashMap<String, Node>   labelToNodeMap  = iap.Utils.getLabelToNodeMap();
                HashMap<String, String> labelToLine     = iap.Utils.getLabelsToLineMap(inputFile);
                
                for(String label : labelToLine.keySet()){
                    if(labelToNodeMap.containsKey(label.toUpperCase())){
                        result.add(labelToLine.get(label));
                    }
                }
                
                iap.Utils.writeListToFile(result, inputFile);
                
                JOptionPane.showMessageDialog(null, "Finish");
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
            
        }
    }//GEN-LAST:event_rmvnodesNotInGrapgBtnActionPerformed

    private void rmvIsolatedNodesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvIsolatedNodesBtnActionPerformed
        //Get the graph
        Graph graph = Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
        Ranking degreeRank = Lookup.getDefault().lookup(RankingController.class).getModel().getRanking(Ranking.NODE_ELEMENT, Ranking.DEGREE_RANKING);
        LinkedList<Node> node2Rmv = new LinkedList();
        //iterate trough all the nodes, if the degree is = 0 remove ir
        int counter = 0;
        for(Node n : graph.getNodes()){
            int degree = (int)degreeRank.getValue(n);
            if(degree == 0){
                node2Rmv.add(n);
                counter++;
            }
        }
        
        for(Node n : node2Rmv){
            graph.removeNode(n);
        }
        micResultTxtField.setText("Removed nodes: " + counter);
    }//GEN-LAST:event_rmvIsolatedNodesBtnActionPerformed

    private void metricAvrgRunBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricAvrgRunBtnActionPerformed
        Graph graph = Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();

        ArrayList<Ranking> ranks = new ArrayList();
        setRanksToUseForMetricAvrg(ranks);
        
        GraphManager.getInstance().metricAvrgOfNeighbors(ranks);

        
    }//GEN-LAST:event_metricAvrgRunBtnActionPerformed
    
    private void setMetricAvrgNeighList(ArrayList<Ranking> ranks){
        RankingController rankingController = Lookup.getDefault().lookup(RankingController.class);
        RankingModel rankModel = rankingController.getModel();
        
        if(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + GraphDistance.CLOSENESS) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + GraphDistance.CLOSENESS));
        
        if(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + GraphDistance.BETWEENNESS) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + GraphDistance.BETWEENNESS));
        
        if(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + EigenvectorCentrality.EIGENVECTOR) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + EigenvectorCentrality.EIGENVECTOR));
        
        if(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + PageRank.PAGERANK) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + PageRank.PAGERANK));
        
        if(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + Degree.DEGREE) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + Degree.DEGREE));
        
        if(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + iap.NeighborNeighborMetric.NEIGHBOR_NEIGHBOR) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + iap.NeighborNeighborMetric.NEIGHBOR_NEIGHBOR));
        
        if(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + iap.NeighborNeighborMetric.NEIGHBOR_NEIGHBOR_LOG) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + iap.NeighborNeighborMetric.NEIGHBOR_NEIGHBOR_LOG));
        
        if(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + WeightedDegree.WDEGREE) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT, iap.MetricAvrgOfNeighbors.NEIGHBORS_METRIC_AVRG + WeightedDegree.WDEGREE));
        
    }
    private void rankingSavingSaveBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingSavingSaveBtn1ActionPerformed
        if(rankingSavingOutputFile == null){
            JOptionPane.showMessageDialog(null, "An output file have to be selected");
            return;
        }

        Graph graph = Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();

        ArrayList<Ranking> ranks = new ArrayList();
        setMetricAvrgNeighList(ranks);

        if(ranks.size() > 0){
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(rankingSavingOutputFile));

                //writhe name of the matrics
                writer.write("label");
                for(Ranking rank : ranks){
                    writer.write("," + rank.getDisplayName());
                }
                writer.newLine();

                if(rankingSavingInputFile == null){
                    for(Node node : graph.getNodes()){
                        writer.write(node.getNodeData().getLabel());                //write name of the person
                        for(Ranking rank : ranks){
                            writer.write("," + rank.getValue(node).toString());
                        }
                        writer.newLine();
                        writer.flush();
                    }
                }else{
                    HashMap<String, Node> labelToNodeMap = iap.Utils.getLabelToNodeMap();
                    BufferedReader reader = new BufferedReader(new FileReader(rankingSavingInputFile));
                    String line;
                    while((line = reader.readLine()) != null){                                                  //go trought the whole input file
                        String nodeLabelInFile = line.split(",")[0].trim().toUpperCase();                       //extract node lable from the input file
                        if(labelToNodeMap.containsKey(nodeLabelInFile)){                                        //save the result only if the input node exist in the graph

                            String line2Write = line;
                            for(Ranking rank :ranks){
                                line2Write += "," + rank.getValue(labelToNodeMap.get(nodeLabelInFile));
                            }
                            writer.write(line2Write);
                            writer.newLine();
                            writer.flush();
                        }
                    }
                }
                writer.close();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        JOptionPane.showMessageDialog(null, "Finish");
    }//GEN-LAST:event_rankingSavingSaveBtn1ActionPerformed

    private void rmvDuplicateFile1TxtfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvDuplicateFile1TxtfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rmvDuplicateFile1TxtfieldActionPerformed

    private void setRanksToSave(ArrayList<Ranking> ranks){
        RankingController rankingController = Lookup.getDefault().lookup(RankingController.class);
        RankingModel rankModel = rankingController.getModel();
        
        if(rankingSavingClosenessChackBox.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, GraphDistance.CLOSENESS) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT, GraphDistance.CLOSENESS));
            else
                JOptionPane.showMessageDialog(null, rankingSavingClosenessChackBox.getText() + " have not beeing calculated. Ignored");
        }
        if(rankingSavingEigenvectorCentCheckBox.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, EigenvectorCentrality.EIGENVECTOR) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  EigenvectorCentrality.EIGENVECTOR));
            else
                JOptionPane.showMessageDialog(null, rankingSavingEigenvectorCentCheckBox.getText() + " have not beeing calculated. Ignored");
        }
        if(rankingSavingPageRankChackBox.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, PageRank.PAGERANK) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  PageRank.PAGERANK));
            else
                JOptionPane.showMessageDialog(null, rankingSavingPageRankChackBox.getText() + " have not beeing calculated. Ignored");
        }
        if(rankingSavingDegreeCheckBox.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, WeightedDegree.WDEGREE) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  WeightedDegree.WDEGREE));
            else
                JOptionPane.showMessageDialog(null, rankingSavingDegreeCheckBox.getText() + " have not beeing calculated. Ignored");
        }
        if(rankingSavingNumNeightbosCheckBox.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, Degree.DEGREE) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  Degree.DEGREE));
            else
                JOptionPane.showMessageDialog(null, rankingSavingNumNeightbosCheckBox.getText() + " have not beeing calculated. Ignored");
        }
        if(rankingSavingBetweenessCheckBox.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, GraphDistance.BETWEENNESS) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  GraphDistance.BETWEENNESS));
            else
                JOptionPane.showMessageDialog(null, rankingSavingBetweenessCheckBox.getText() + " have not beeing calculated. Ignored");
        }
        if(rankingSavingNeighAvrgCheckBox.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, NeighborNeighborMetric.NEIGHBOR_NEIGHBOR) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  NeighborNeighborMetric.NEIGHBOR_NEIGHBOR));
            else
                JOptionPane.showMessageDialog(null, rankingSavingNeighAvrgCheckBox.getText() + " have not beeing calculated. Ignored");
        }
        if(rankingSavingNeighLogCheckBox.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, NeighborNeighborMetric.NEIGHBOR_NEIGHBOR_LOG) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  NeighborNeighborMetric.NEIGHBOR_NEIGHBOR_LOG));
            else
                JOptionPane.showMessageDialog(null, rankingSavingNeighLogCheckBox.getText() + " have not beeing calculated. Ignored");
        }
    }
    
    private void setRanksToUseForMetricAvrg(ArrayList<Ranking> ranks){
        RankingController rankingController = Lookup.getDefault().lookup(RankingController.class);
        RankingModel rankModel = rankingController.getModel();
        
        if(metricAvrgClosenessChackBox1.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, GraphDistance.CLOSENESS) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT, GraphDistance.CLOSENESS));
            else
                JOptionPane.showMessageDialog(null, metricAvrgClosenessChackBox1.getText() + " have not beeing calculated. Ignored");
        }
        if(metricAvrgEigenvectorCentCheckBox1.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, EigenvectorCentrality.EIGENVECTOR) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  EigenvectorCentrality.EIGENVECTOR));
            else
                JOptionPane.showMessageDialog(null, metricAvrgEigenvectorCentCheckBox1.getText() + " have not beeing calculated. Ignored");
        }
        if(metricAvrgPageRankChackBox1.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, PageRank.PAGERANK) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  PageRank.PAGERANK));
            else
                JOptionPane.showMessageDialog(null, metricAvrgPageRankChackBox1.getText() + " have not beeing calculated. Ignored");
        }
        if(metricAvrgDegreeCheckBox.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, WeightedDegree.WDEGREE) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  WeightedDegree.WDEGREE));
            else
                JOptionPane.showMessageDialog(null, metricAvrgDegreeCheckBox.getText() + " have not beeing calculated. Ignored");
        }
        if(metricAvrgNumNeightbosCheckBox1.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, Degree.DEGREE) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  Degree.DEGREE));
            else
                JOptionPane.showMessageDialog(null, metricAvrgNumNeightbosCheckBox1.getText() + " have not beeing calculated. Ignored");
        }
        if(metricAvrgBetweenessCheckBox1.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, GraphDistance.BETWEENNESS) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  GraphDistance.BETWEENNESS));
            else
                JOptionPane.showMessageDialog(null, metricAvrgBetweenessCheckBox1.getText() + " have not beeing calculated. Ignored");
        }
        if(metricAvrgNeighAvrgCheckBox1.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, NeighborNeighborMetric.NEIGHBOR_NEIGHBOR) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  NeighborNeighborMetric.NEIGHBOR_NEIGHBOR));
            else
                JOptionPane.showMessageDialog(null, metricAvrgNeighAvrgCheckBox1.getText() + " have not beeing calculated. Ignored");
        }
        if(metricAvrgNeighLogCheckBox1.isSelected()){
            if(rankModel.getRanking(Ranking.NODE_ELEMENT, NeighborNeighborMetric.NEIGHBOR_NEIGHBOR_LOG) != null)
                ranks.add(rankModel.getRanking(Ranking.NODE_ELEMENT,  NeighborNeighborMetric.NEIGHBOR_NEIGHBOR_LOG));
            else
                JOptionPane.showMessageDialog(null, metricAvrgNeighLogCheckBox1.getText() + " have not beeing calculated. Ignored");
        }
    } 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bothwikiBrn;
    private javax.swing.JCheckBox closenessAvrgCheckBtn;
    private javax.swing.JCheckBox eigenAvrgCheckBtn;
    private javax.swing.JTextField inputFileTxtField;
    private javax.swing.JTextField inputFileTxtFieldLeadshipAnnot;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private javax.swing.JTextField leadershipExcludeKeyWords;
    private javax.swing.JTextField leadershipKeyWords;
    private javax.swing.JCheckBox metricAvrgBetweenessCheckBox1;
    private javax.swing.JCheckBox metricAvrgClosenessChackBox1;
    private javax.swing.JCheckBox metricAvrgDegreeCheckBox;
    private javax.swing.JCheckBox metricAvrgEigenvectorCentCheckBox1;
    private javax.swing.JCheckBox metricAvrgNeighAvrgCheckBox1;
    private javax.swing.JCheckBox metricAvrgNeighLogCheckBox1;
    private javax.swing.JCheckBox metricAvrgNumNeightbosCheckBox1;
    private javax.swing.JCheckBox metricAvrgPageRankChackBox1;
    private javax.swing.JButton metricAvrgRunBtn;
    private javax.swing.JTextField micResultTxtField;
    private javax.swing.JTextField outputFileTxtField;
    private javax.swing.JTextField outputFileTxtFieldLeadAnnot;
    private javax.swing.JCheckBox rankingSavingBetweenessCheckBox;
    private javax.swing.JCheckBox rankingSavingClosenessChackBox;
    private javax.swing.JCheckBox rankingSavingDegreeCheckBox;
    private javax.swing.JCheckBox rankingSavingEigenvectorCentCheckBox;
    private javax.swing.JTextField rankingSavingInputFileTxtField;
    private javax.swing.JCheckBox rankingSavingNeighAvrgCheckBox;
    private javax.swing.JCheckBox rankingSavingNeighLogCheckBox;
    private javax.swing.JCheckBox rankingSavingNumNeightbosCheckBox;
    private javax.swing.JTextField rankingSavingOutputFileTxtField;
    private javax.swing.JCheckBox rankingSavingPageRankChackBox;
    private javax.swing.JButton rankingSavingSaveBtn;
    private javax.swing.JButton rankingSavingSaveBtn1;
    private javax.swing.JButton rankingSavingSearchBtn;
    private javax.swing.JButton rankingSavingSearchBtn1;
    private javax.swing.JTextField rmvDuplicateFile1Txtfield;
    private javax.swing.JTextField rmvDuplicateFile2Txtfield;
    private javax.swing.JButton rmvDuplicateOutputFSearchBtn;
    private javax.swing.JTextField rmvDuplicateOutputFileTxtField;
    private javax.swing.JButton rmvDuplicateRemoveBtn;
    private javax.swing.JTextField rmvDuplicateResultTxtField;
    private javax.swing.JButton rmvDuplicatesF1Btn;
    private javax.swing.JButton rmvDuplicatesF2btn;
    private javax.swing.JTextField rmvIsolatedNodeInputFieldTxtField;
    private javax.swing.JTextField rmvIsolatedNodeOutputFieldTxtField;
    private javax.swing.JButton rmvIsolatedNodeRemoveBtn;
    private javax.swing.JButton rmvIsolatedNodesBtn;
    private javax.swing.JButton rmvIsolatedNodesOutputFileSearchBtn;
    private javax.swing.JButton rmvIsolatedNodesSearchBtn;
    private javax.swing.JButton rmvnodesNotInGrapgBtn;
    private javax.swing.JRadioButton wikiDataRadBtn;
    private javax.swing.JRadioButton wikiMediaRadBtn;
    // End of variables declaration//GEN-END:variables
}
